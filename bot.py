from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters, CallbackQueryHandler
from config import TELEGRAM_TOKEN, ADMIN_IDS
from db import init_db, get_user, increment_usage, reset_monthly_usage, update_user
from openai_utils import threadsify_text
from datetime import datetime
import sys
sys.path.append('threads-rag')
from threads-rag.index import get_rag_results
from telegram.constants import ChatAction

FREE_LIMIT = 5
PRO_LIMIT = 500

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
STYLES = [
    ("–ú–µ–º", "–º–µ–º"),
    ("–ò—Ä–æ–Ω–∏—è", "–∏—Ä–æ–Ω–∏—è"),
    ("–¶–∏—Ç–∞—Ç–∞", "—Ü–∏—Ç–∞—Ç–∞"),
    ("–°–∞—Ä–∫–∞–∑–º", "—Å–∞—Ä–∫–∞–∑–º"),
    ("–ò–Ω—Ñ–æ", "–∏–Ω—Ñ–æ"),
    ("–ò–ò", "–∏–∏"),
]

# user_id -> {'styles': [...], 'random': bool}
user_styles = {}

LOG_PATH = "logs.txt"

def log_interaction(user_id, prompt, selected_styles, response):
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().isoformat()}] user_id={user_id}\n")
        f.write(f"prompt: {prompt}\n")
        f.write(f"selected_styles: {selected_styles}\n")
        f.write(f"response: {response}\n")
        f.write("---\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    if not user:
        now_month = datetime.now().strftime("%Y-%m")
        update_user(user_id, last_reset=now_month)
        user = get_user(user_id)
    plan, used, last_reset = user
    if user_id in ADMIN_IDS:
        left = '‚àû'
    else:
        left = (PRO_LIMIT if plan == "pro" else FREE_LIMIT) - (used or 0)
    msg = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Threads-–∫–∞—Ä—É—Å–µ–ª–µ–π.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç Threads.\n\n"
        f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {left} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Pro-–ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "–î–ª—è —Å–≤—è–∑–∏ @kromakhov"
    )
    await update.message.reply_text(msg)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    keyboard = [
        [InlineKeyboardButton(text, callback_data=f"style_{value}") for text, value in STYLES[:3]],
        [InlineKeyboardButton(text, callback_data=f"style_{value}") for text, value in STYLES[3:]],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_random"), InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="style_done")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    menu_msg = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=reply_markup)
    context.user_data['menu_message_id'] = menu_msg.message_id

async def style_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        if user_id not in user_styles:
            user_styles[user_id] = {'styles': [], 'random': False}
        if data == "style_random":
            await query.answer(text="–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–ª—è!")
            user_styles[user_id]['styles'] = []
            user_styles[user_id]['random'] = True
            await query.edit_message_text(
                "–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º: üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª ‚Äî –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Å—Ç–∏–ª–µ!"
            )
            # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –∏–∑ user_data
            if 'menu_message_id' in context.user_data:
                del context.user_data['menu_message_id']
            return
        if data.startswith("style_"):
            style = data[6:]
            if style == "done":
                chosen = "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å" if user_styles[user_id]['random'] else ", ".join(user_styles[user_id]['styles']) if user_styles[user_id]['styles'] else "–Ω–µ—Ç"
                await query.answer()
                await query.edit_message_text(
                    f"–°—Ç–∏–ª–∏ –≤—ã–±—Ä–∞–Ω—ã: {chosen}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è Threads-–∫–∞—Ä—É—Å–µ–ª–∏."
                )
                # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –∏–∑ user_data
                if 'menu_message_id' in context.user_data:
                    del context.user_data['menu_message_id']
                return
            # –û–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å
            user_styles[user_id]['random'] = False
            if style in user_styles[user_id]['styles']:
                user_styles[user_id]['styles'].remove(style)
            else:
                user_styles[user_id]['styles'].append(style)
            await query.answer(text=f"{'–î–æ–±–∞–≤–ª–µ–Ω' if style in user_styles[user_id]['styles'] else '–£–±—Ä–∞–Ω'}: {style}")
            # –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ–º!
            keyboard = [
                [InlineKeyboardButton(f"{'‚úÖ ' if s[1] in user_styles[user_id]['styles'] else ''}{s[0]}", callback_data=f"style_{s[1]}") for s in STYLES[:3]],
                [InlineKeyboardButton(f"{'‚úÖ ' if s[1] in user_styles[user_id]['styles'] else ''}{s[0]}", callback_data=f"style_{s[1]}") for s in STYLES[3:]],
                [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_random"), InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="style_done")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)
            return
    except Exception:
        await update.effective_message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞, —É–∂–µ —á–∏–Ω–∏–º. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        now_month = datetime.now().strftime("%Y-%m")
        user = get_user(user_id)
        if not user:
            update_user(user_id, last_reset=now_month)
            user = get_user(user_id)
        plan, used, last_reset = user
        if last_reset != now_month:
            reset_monthly_usage(user_id)
            used = 0
        if user_id in ADMIN_IDS:
            unlimited = True
        else:
            unlimited = False
        limit = PRO_LIMIT if plan == "pro" else FREE_LIMIT
        if not unlimited and used >= limit:
            pay_url = "https://donate.stream/yoomoney4100119217985005"
            text = (
                f"–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É –∏—Å—á–µ—Ä–ø–∞–Ω ({limit} –≤ –º–µ—Å—è—Ü).\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:"
            )
            keyboard = [
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'menu_message_id' in context.user_data:
                try:
                    await context.bot.edit_message_reply_markup(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['menu_message_id'],
                        reply_markup=None
                    )
                except Exception:
                    pass
                del context.user_data['menu_message_id']
            return
        msg = update.message
        if msg.forward_from_chat or msg.forward_from:
            content = msg.text or msg.caption
            if content is None:
                content = ""
            if not content:
                await update.message.reply_text("–í –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")
                return
        else:
            content = msg.text
            if content is None:
                content = ""
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Threads-–∫–∞—Ä—É—Å–µ–ª—å...")
        # --- RAG: –∏—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ prompt ---
        if len(content.strip()) < 2:
            rag_results = []
        else:
            rag_results = get_rag_results(content, k=3)
        # –§–æ—Ä–º–∏—Ä—É–µ–º few-shot –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (input/output)
        few_shot_messages = []
        for post in rag_results:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å input/output –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
            # –ï—Å–ª–∏ –ø–æ—Å—Ç ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if isinstance(post, dict):
                input_text = post.get('input', '')
                output_text = post.get('output', '')
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –¥–µ–ª–∏–º –ø–æ '---' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                parts = post.split('---')
                input_text = parts[0].strip()
                output_text = parts[1].strip() if len(parts) > 1 else ''
            if input_text and output_text:
                few_shot_messages.append({"role": "user", "content": input_text})
                few_shot_messages.append({"role": "assistant", "content": output_text})
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = user_styles.get(user_id, {'styles': [], 'random': False})
        selected_styles = user_data.get('styles', [])
        is_random = user_data.get('random', False)
        if is_random:
            prompt_for_log = "–°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å: —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç-–∫–∞—Ä—É—Å–µ–ª—å –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É –∏ –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ."
            result = threadsify_text(
                "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç-–∫–∞—Ä—É—Å–µ–ª—å –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É –∏ –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º '–°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å'.",
                few_shot_messages=few_shot_messages,
                selected_styles=None
            )
        else:
            prompt_for_log = content
            result = threadsify_text(content, few_shot_messages=few_shot_messages, selected_styles=selected_styles)
        # --- –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ RAG ---
        if not unlimited:
            increment_usage(user_id)
        slides = [s.strip() for s in result.split('\n') if s.strip()]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ª–∞–π–¥—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        slides_text = '\n\n'.join(slides)
        await update.message.reply_text(f"```\n{slides_text}\n```", parse_mode="MarkdownV2")
        # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        if user_id in user_styles:
            del user_styles[user_id]
        # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if 'menu_message_id' in context.user_data:
            try:
                await context.bot.edit_message_reply_markup(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['menu_message_id'],
                    reply_markup=None
                )
            except Exception:
                pass
            del context.user_data['menu_message_id']
        # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
        keyboard = [
            [InlineKeyboardButton(text, callback_data=f"style_{value}") for text, value in STYLES[:3]],
            [InlineKeyboardButton(text, callback_data=f"style_{value}") for text, value in STYLES[3:]],
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å", callback_data="style_random"), InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="style_done")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        menu_msg = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=reply_markup)
        context.user_data['menu_message_id'] = menu_msg.message_id
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        log_interaction(user_id, prompt_for_log, selected_styles if not is_random else 'random', result)
    except Exception:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—à–∏–±–∫–∞, —É–∂–µ —á–∏–Ω–∏–º. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

async def pro_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /pro user_id")
        return
    target_id = int(context.args[0])
    update_user(target_id, plan="pro")
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω–∞ Pro.")

async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
        with open(LOG_PATH, "rb") as f:
            await update.message.reply_document(f, filename="logs.txt")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pro", pro_command))
    app.add_handler(CommandHandler("logs", logs_command))
    app.add_handler(CallbackQueryHandler(style_callback, pattern=r"^style_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main() 
